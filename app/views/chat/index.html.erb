<html>
  <head>
    <title>t2m</title>
  </head>
  <!-- Google Fonts -->
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">

  <!-- CSS Reset -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css">

  <!-- Milligram CSS minified -->
  <link rel="stylesheet" href="https://milligram.github.io/css/milligram.min.css">
  <style>
    .lw-header h1 {
      margin-top: 0.40em;
    }

    .lw-form {
      margin: 70px 300px;
      border: 1px solid #ccc;
      border-radius: 5px;
      padding: 10px;
    }

    .lw-form label {
      margin: 20px;
      display: inline-block;
    }

    .lw-form input {
      width: 64%;
      border: none;
      margin: 0;
      height: 40px;
    }

    .button {
      width: 100% !important;
    }

    /* CHAT */

    .lw-chat-container {
        padding-top: 50px;
      }

      .lw-chat {
        width: 100%;
        height: 500px;
        border-radius: 5px;
        border: .1rem solid #FFBBBB;
        overflow: auto;
      }

      .lw-message-content {
        margin: 0;
      }

      .lw-message-content .messages {
        margin: 0;
        font-size: 14px;
        margin: 10px;
        padding: 5px 15px;
        background-color: rgba(244, 245, 246, 0.70);
        border-radius: 10px;
      }

      .lw-chat-actions {
        padding-top: 10px;
      }

      .lw-chat-actions input {
        width: 89.5%;
      }

      .lw-chat-actions .lw-send {
        float: right;
      }

      .lw-other-actions {
        width: 100%;
        text-align: center;
      }
      .lw-other-actions {
        margin-top: 60px;
      }

      .lw-shut-up {
        background-color: #606C76;
        border: .1rem solid #606C76;
      }

      .lw-user {
        font-size: 15px;
        margin: 13px 15px 5px 15px;
      }

      .lw-user strong {
        text-transform: uppercase;
      }

      .lw-status {
        float: right;
        margin: 0px 15px;
      }
      .lw-status p {
        margin: 0;
        font-size: 10px;
        font-weight: 700;
        text-transform: uppercase;
      }

      .lw-chat-actions .button{
        width: auto !important;
      }

      .lw-client .lw-user {
        color: #F33232;
      }
      .lw-client .messages {
        background-color: rgba(243, 50, 50, 0.05);
      }

      .lw-client .lw-status p {
        color: #F33232;
      }

     .lw-client-send input[type='submit'] {
        background-color: #F33232 !important;
        border: 1px solid #F33232;
      }

      .lw-client-send #message {
        border: .1rem solid #FFBBBB;
      }

      .lw-client-cancel .lw-shut-up {
        width: 20%;
      }

      .login .button {
        background-color: #f33232;
      }

      .lw-client-cancel {
        margin-top: 20px !important;
      }

    </style>
  <body>

    <section class="lw-login login">
      <header class="lw-header">
        <div class="container">
          <h1>Layer - Chat</h1>
          <hr>
        </div>
      </header>
      <div class="container">

        <p> <b>Hello Client</b>, Lorem ipsum dolor sit amet, consectetur adipisicing elit. Sapiente, quaerat laudantium beatae accusamus totam asperiores delectus ea saepe consequatur consequuntur non laborum fugiat, eligendi iusto dolorem obcaecati veritatis temporibus ut.</p>

        <form id='login' class="lw-form login">
          <label for='name'>Enter your name</label>
          <input type='hidden' id='channel' value='corporativo'>
          <input id='username' type'text' placeholder="Enter your name">
          <input class="button" type='submit' value='Enter in Chat'>
        </form>

      </div>
    </section>

     <section class="lw-chat-container">
      <div class="container">
        <header>
          <h1>Chat - t2m - Client
          </h1>
          <hr>
        </header>
        <form id="chat">
          <div class="lw-chat">
          </div>
          <div class="lw-chat-actions">
            <div class="lw-chat-send lw-client-send">
              <input type="text" id="message" placeholder="send a message..." autocomplete='off' required/>
              <input class="button" type='submit' value='enviar'>
            </div>
          </div>
        </form>
        <div class="lw-other-actions lw-client-cancel">
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Enim, eos aperiam amet nostrum nesciunt, est laboriosam eaque dolorum aliquam aliquid fuga officia cum dolor eligendi esse ratione velit non fugiat.</p>
          <button class="lw-shut-up" id="finalize_chat">Encerrar</button>
        </div>
      </div>
    </section>

    <script>
      var chat = {
        currentUser: null,
        conversationId: null,
        currentSessionToken: null,
        connection: null,

        start: function() {
          $('.lw-chat-container').hide();
          $('.lw-login').show();
          $('#login').show();
          $('.lw-message-content').remove();
        },

        addMessage: function(message) {
          $('.lw-chat').append(message)
        },

        logout: function() {
          // expire session token
          $.ajax({
            url:'https://api.layer.com/sessions/' + chat.currentSessionToken,
            type: 'DELETE',
            beforeSend: function(request) {
              request.setRequestHeader('Authorization', 'Layer session-token=' + chat.currentSessionToken);
              request.setRequestHeader('Accept', 'application/vnd.layer+json; version=1.0');
              request.setRequestHeader('Content-Type', 'application/json');
            },
            success: function(response) {
              console.log('closing connection..');
              chat.connection.close();
              console.log('session token was expired with success.');
              chat.start();
            }
          });
        }
      };

      $(document).ready(function() {
        chat.start();
      });

      /*
      This function handles the form
      login submit.
      */
      $('#login').submit(function(e) {
        e.preventDefault();
        var channel  = $('#channel').val();
        var username = $('#username').val();

        // get a session token
        $.get('/authenticate' + '?user_id=' + username, function(user) {
          var sessionToken = user.session_token;
          console.log(sessionToken);

          chat.currentSessionToken = sessionToken;
          chat.currentUser = username;

          // creates a new protocol.
          attributes = {
            'channel': channel,
            'login'  : username
          };

          $.post('/conversations/', attributes, function(response) {
            var ws = new WebSocket('wss://api.layer.com/websocket?session_token=' + sessionToken, 'layer-1.0');
            ws.addEventListener('message', messageHandler);
            chat.connection = ws;
            console.log('connection established.');

            chat.conversationId = response.id;
            // hides the login screen
            $('.login').hide();

            // displays chat screen
            $('.lw-chat-container').show();
          });
        });
      });

      /*
      This function handles the
      message.
      */
      function messageHandler(event) {
        var message = JSON.parse(event.data);
        var body = message.body;

        switch(message.type) {
          case "change":
            handleChange(body);
            break;
        }
      };

      /*
      This function handles the
      changes on a message.

      Message types:
      - "Message"
      - "Conversation"
      */
      function handleChange(message) {
        try {
          switch(message.operation) {
            case "create":
              console.log("WEBSOCKET CREATE: " + message.object.id);
              console.log("WEBSOCKET RECEIVED: " + JSON.stringify(message, false, 4));
              switch(message.object.type) {
                case "Message":
                  handleCreateMessage(message);
                  break;
                case "Conversation":
                  handleCreateConversation(message);
              }

              break;

            case "delete":
              console.log("WEBSOCKET DELETE: " + message.object.id);
              console.log("WEBSOCKET RECEIVED: " + JSON.stringify(message, false, 4));
              break;

            case "patch":
              console.log("WEBSOCKET PATCH: " + message.object.id);
              console.log("WEBSOCKET RECEIVED: " + JSON.stringify(message, false, 4));
              switch(message.object.type) {
                case "Message":
                  // handleUpdateMessage(message);
                  break;
                case "Conversation":
                  handleUpdateConversation(message);
              }

              break;
          }
        } catch(e) {
          console.error("layer-patch Error: " + e);
        }
      }

      /*
      This function handles
      the message create process.
      */
      function handleCreateMessage(message) {
        var getSenderName = function(sender) {
          if (sender.name == null) {
            return sender.user_id;
            } else {
            return sender.name;
          }
        }

        var sent_at = formatDateTime(message.data.sent_at);
        var parts = message.data.parts;
        var sender = message.data.sender;
        var status_message = 'DELIVERING';

        sender_name = getSenderName(sender);

        $.each(parts, function(index,message) {
          var new_message = '<div class="lw-message-content lw-client">' +
                              '<h2 class="lw-user">' +
                                '<strong>' + sender_name + '</strong>' + ' disse: ' +
                              '</h2>' +
                              '<p class="messages">' + message.body + '</p>' +
                              '<div class="lw-status">' + '<p>' + status_message + '</p>' + '</div>' +
                            '</div>'
          chat.addMessage(new_message);
        });
      }

      /*
        This function handles
        the conversation create process
      */
      function handleCreateConversation(message) {
        var participants = message.data.participants;
        var created_at = formatDateTime(message.data.created_at);
        var created_by = createdBy(chat.currentUser, participants);
          var new_message =   '<div class="lw-message-content">' +
                              '<h2 class="lw-user">' +
                                '<strong>' + created_by + '</strong>' + ' disse: ' +
                              '</h2>' +
                              '<p class="messages">' + 'Oi, eu sou Goku! Em que posso ajudar?' + '</p>' +
                              '<div class="lw-status">' + '<p>' + status_message + '</p>' + '</div>' +
                            '</div>'

        chat.conversationId = message.data.id;
        chat.addMessage(new_message);
      }

      /*
        This function verifies if the currentUser is present on the participants list, if it is not present,
        it indicates that the counter-part has closed the conversation and we need to expire the sessionToken for
        the currentUser
      */
      function handleUpdateConversation(message) {
        console.log('conversation updated.');
        // returns an array of data's. It may returns a operation kind "remove", "add", probably some others.
        console.log("MESSAGE RECEIVED: " + JSON.stringify(message, false, 4));
        console.log("MESSAGE DATA: " + message['data'])

        $.each(message['data'], function(index, message_data) {
          switch(message_data['operation']) {
            case "add":
              // handle add operation
              // it may be adding a new participant or maybe some other property.
              console.log('adicionou um participante..');
              break;

            case "remove":
              switch(message_data['property']) {
                case "participants":
                  handleRemoveParticipants(message_data);
              }

              break;
          }

        });
      }

      /*
        This function handles the
        remove of the participant from a conversation,

        message format:

        {
          "operation": "remove",
          "property": "participants",
          "value": "shima"
        }

      */
      function handleRemoveParticipants(message) {
        console.log('here we removes the customer logged');

        var participants = message.value;
        console.log(message.value);
        if (participants.indexOf(chat.currentUser) == -1) {
          console.log('it seems the chat was closed by the analyst.');
          chat.logout();
        }
      }

      /*
        This function handles to
        obtain the author of the message
      */
      function createdBy(current_user, participants) {
        for (var i=participants.length-1; i>=0; i--) {
          if (participants[i] === chat.currentUser) {
            participants.splice(1, 1);
            return participants[0];
          }
        }
      }

      /*
        This function handles
        the date time format of the message
      */
      function formatDateTime(datetime) {
        var date = new Date(datetime);
        var dateString = date.toLocaleDateString();
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();

        return dateString + ' ' + hours + ':' + minutes +  ':' + seconds;
      }


      /*
        This function handles
        the submit of a message
      */
      $('#chat').submit(function(e) {
        e.preventDefault();
        var message = $('#message').val();
        var new_message = '<p>' + message + '</p>';

        $('#message').val('');

        // creating a message
        attributes = {
          conversation: {
            id: chat.conversationId,
            sender: {
              user_id: chat.currentUser
            },
            parts: [
              {
                body: message,
                mime_type: 'text/plain'
              }
            ]
          }
        }

        //Post Message
        $.post('/messages', attributes, function(message) {
          $('#message').val('');
          $('#message')[0].focus();
        });
      });

    </script>
  </body>
</html>
