<html>
  <head>
    <title>Support</title>
  </head>
  <body>
    <script>

      $(document).ready(function() {
        // preparing..
        $('.chat_screen').hide();

        var chat = {
          currentUser: null,
          conversationId: null,
          addMessage: function(message) {
            $('.messages').append(message)
          }
        };


        $('#chat').submit(function(e) {
          e.preventDefault();
          console.log('sending message..');
        });

        $('#chat').submit(function(e) {
          e.preventDefault();
          var message = $('#message').val();

          var new_message = '<p>' + message + '</p>';

          // creating a message
          attributes = {
            conversation: {
              id: chat.conversationId,
              sender: {
                name: chat.currentUser
              },
              parts: [
                {
                  body: message,
                  mime_type: 'text/plain'
                }
              ]
            }
          }

          $.post('/messages', attributes, function(message) {
            //chat.addMessage(new_message);
            $('#message').val('');
            $('#message')[0].focus();
          });
        });

        $('#login').submit(function(e) {
          e.preventDefault();

          // get queue name
          $.get('/users/queue', function(data) {
            var queue = data.queue;
            var username = $('#username').val();

            chat.currentUser = username;

            console.log(queue);
            console.log(username);

            // get session token
            $.get('/authenticate' + '?user_id=' + username, function(user) {
              var session_token = user.session_token;
              console.log(session_token);

              // hides login screen
              $('.login_screen').hide();

              var ws = new WebSocket('wss://api.layer.com/websocket?session_token=' + session_token, 'layer-1.0');
              ws.addEventListener('message', messageHandler);
              console.log('connection established.');

              // displays chat screen
              $('.chat_screen').show();
            });
          });

          function messageHandler(event) {
            var message = JSON.parse(event.data);
            var body = message.body;
              console.log("WEBSOCKET RECEIVED: " + JSON.stringify(message, false, 4));

            switch(message.type) {
              case "change":
                handleChange(body);
                break;
            }
          };

          // message can be a Message type or a Conversation type.
          function handleChange(message) {
            try {
              switch(message.operation) {
                case "create":
                  console.log("WEBSOCKET CREATE: " + message.object.id);
                  console.log("WEBSOCKET RECEIVED: " + JSON.stringify(message, false, 4));
                  switch(message.object.type) {
                    case "Message":
                      handleCreateMessage(message);
                      break;
                    case "Conversation":
                      handleCreateConversation(message);
                  }

                  break;

                case "delete":
                  console.log("WEBSOCKET DELETE: " + message.object.id);
                  console.log("WEBSOCKET RECEIVED: " + JSON.stringify(message, false, 4));
                  break;

                case "patch":
                  console.log("WEBSOCKET PATCH: " + message.object.id);
                  console.log("WEBSOCKET RECEIVED: " + JSON.stringify(message, false, 4));
                  break;

              }
            } catch(e) {
              console.error("layer-patch Error: " + e);
            }
          }

          function handleCreateMessage(message) {
            var sent_at = formatDateTime(message.data.sent_at);
            var parts = message.data.parts;
            var sender = message.data.sender;

            $.each(parts, function(index,message) {
              var new_message = '<p>[' + sent_at + '] ' + sender.name + ' disse: ' + message.body + '</p>';
              chat.addMessage(new_message);
            });
          }

          function handleCreateConversation(message) {
            var participants = message.data.participants;
            var created_at = formatDateTime(message.data.created_at);
            var created_by = createdBy(chat.currentUser, participants);
            var new_message = '<p>[' + created_at + '] ' + created_by + ' iniciou uma conversa com vocÃª..' + '</p>';

            chat.conversationId = message.data.id;
            chat.addMessage(new_message);
          }

          function createdBy(current_user, participants) {
            for (var i=participants.length-1; i>=0; i--) {
              if (participants[i] === chat.currentUser) {
                participants.splice(1, 1);
                return participants[0];
              }
            }
          }

          function formatDateTime(datetime) {
            var date = new Date(datetime);
            var dateString = date.toLocaleDateString();
            var hours = date.getHours();
            var minutes = date.getMinutes();
            var seconds = date.getSeconds();

            return dateString + ' ' + hours + ':' + minutes +  ':' + seconds;
          }

        });
      });
    </script>

    <div class='login_screen'>
      <h1>support - login</h1>
      <form id='login'>
        <label for='username'>username</label>
        <input id='username' type'text' size='40'>
        <input type='submit' value='login'>
      </form>
    </div>

    <div class='chat_screen'>
      <h1>support - chat</h1>
      <form id='chat'>
        <div class='messages'></div>
        <input type='text' id='message' size='80' autocomplete='off'>
        <input type='submit' value='enviar'>
      </form>
    </div>

  </body>
</html>
