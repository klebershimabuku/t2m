<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <title>Layer Chat</title>
    <!-- Google Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,300italic,700,700italic">

    <!-- CSS Reset -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/3.0.3/normalize.css">

    <!-- Milligram CSS minified -->
    <link rel="stylesheet" href="https://milligram.github.io/css/milligram.min.css">

    <style>

      .lw-login {
        margin: 100px 250px;
      }

      .lw-login .lw-button {
        margin-top: 15px;
      }

      .lw-hide {
        display: none;
      }

      .lw-show {
        display: block;
      }

      .lw-dashboard-container {
        padding-top: 50px;
      }
      .lw-dashboard-container h1 {
        display: inline-block;
      }

      .lw-dashboard-container small {
        display: inline-block;
        font-size: 15px;
        background-color: #ccc;
        color: #fff;
        padding: 10px 25px;
        border-radius: 5px;
        position: relative;
        bottom: 14px;
      }

      .lw-form {
        width: 50%;
        display: inline-block;
        float: left;
        padding: 20px;
      }
      .lw-queue-title {
        font-size: 18px;
      }

      .lw-queue {
        list-style: none;
      }

      .lw-queue li {
        border: 2px solid #000;
        border-radius: 5px;
        padding: 3px;
      }
      .lw-queue .disabled {
        border: 1px solid #E1E1E1;
      }

      .lw-queue .disabled:hover {
        border: 1px solid #E1E1E1;
      }

      .lw-queue .disabled a {
        cursor: default;
        pointer-events: none;
        color: #ccc;
      }

      .lw-queue li a {
        font-size: 14px;
        padding: 0 15px;
        color: #000;
        font-weight: 300;
        width: 100%;
        display: block;
        pointer-events: none;
        cursor: default;
      }

      .lw-credit {
        width: 50%;
        float: left;
        padding: 20px;
      }

      .lw-chat-container {
        padding-top: 50px;
      }

      .lw-chat {
        width: 100%;
        height: 500px;
        border-radius: 5px;
        border: .1rem solid #d1d1d1;
        overflow: auto;
      }

      .lw-message-content {
        margin: 0;
      }

      .lw-message-content .messages {
        margin: 0;
        font-size: 14px;
        margin: 10px;
        padding: 5px 15px;
        background-color: rgba(244, 245, 246, 0.70);
        border-radius: 10px;
      }

      .lw-chat-actions {
        padding-top: 10px;
      }

      .lw-chat-actions input {
        width: 89.5%;
      }

      .lw-chat-actions .lw-send {
        float: right;
      }

      .lw-other-actions {
        width: 100%;
        text-align: center;
      }
      .lw-other-actions {
        margin-top: 60px;
      }

      .lw-shut-up {
        background-color: #606C76;
        border: .1rem solid #606C76;
      }

      .lw-user {
        font-size: 15px;
        margin: 13px 15px 5px 15px;
      }

      .lw-user strong {
        text-transform: uppercase;
      }

      .lw-status {
        float: right;
        margin: 0px 15px;
      }
      .lw-status p {
        margin: 0;
        font-size: 10px;
        font-weight: 700;
        text-transform: uppercase;
      }
    </style>
  </head>
  <body>
    <section class="lw-login-container">
    <div class="container">
      <div class="lw-login">
        <h1>Login</h1>
        <form id="login">
          <input type="text" id="username" placeholder="Enter a login name" required/>
          <input type="submit" class="lw-button login" value="Entrar" />
        </form>
      </div>
    </div>
    </section>

    <section class="lw-dashboard-container">
    <div class="container">
      <header>
      <h1>Dashboard</h1>
      <small>Analyst</small>
      <hr>
      </header>
      <div class="lw-dashboard">
        <form id="dashboard" class="lw-form">
          <h2 class="lw-queue-title">Fila de Atendimento</h2>
          <ul class="lw-queue">
            <li>
            <a href="">Corporativo</a>
            <input type='hidden' class='channel' value='corporativo'>
            </li>
            <li class="disabled">
            <a href="">Hospedagem</a>
            </li>
            <li class="disabled">
            <a href="">Webmail</a>
            </li>
          </ul>
          <input type="hidden" class='username' value="">
          <input type="submit" class="button" value="Iniciar Atendimento" >
        </form>

        <div class="lw-credit">
          <h1>Lorem ipsum dolor sit amet, consectetur adipisicing elit.</h1>
          <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Optio et reprehenderit soluta possimus, laborum in exercitationem ipsa inventore, ducimus excepturi eius! Quos amet quam at distinctio aut magni porro recusandae!</p>
        </div>
      </div>
    </div>
    </section>

    <section class="lw-chat-container">
    <div class="container">
      <form id="chat">
        <div class="lw-chat">
        </div>
        <div class="lw-chat-actions">
          <div class="lw-chat-send">
            <input type="text" id="message" placeholder="send a message..." required/>
            <button class="lw-send">Enviar</button>
          </div>
        </div>
      </form>

      <div class="lw-other-actions">
            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ut distinctio in voluptatum aliquid, dicta libero sit. Expedita optio, praesentium, voluptate veritatis animi sapiente tempore. Quibusdam unde iusto quia, consectetur similique.</p>
            <button class="lw-shut-up" id="finalize_chat">Encerrar</button>
            <button class="lw-next" id="next_chat">Pr√≥ximo</button>
      </div>
    </div>
    </section>

    <script>

      // LOGIN

      $(document).ready(function() {
        $('.lw-dashboard-container').hide();
        $('.lw-chat-container').hide();
      });

        var chat = {
          currentUser: null,
          conversationId: null,
          addMessage: function(message) {
            $('.lw-chat').append(message)
          }
        };

        $('#login').submit(function(e) {
          e.preventDefault();

          var username = $('#username').val();
          $('.username').attr('value', username);

          $('.lw-login-container').hide();
          $('.lw-dashboard-container').fadeIn();
        });

        $('#dashboard').submit(function(e) {
          e.preventDefault();
          var channel = $('.channel').val();

          var username = $('.username').val();

          // get a session token
          $.get('/authenticate' + '?user_id=' + username, function(user) {
            var session_token = user.session_token;
            console.log(session_token);


            $.post('/chat/' + channel + '/next', {username: username}, function(conversation) {
              console.log('O analista entrou na conversa: ' + conversation.conversation);
              chat.conversationId = conversation.conversation;
            });

            chat.currentUser = username;

            // hides the login screen
            $('.lw-dashboard-container').hide();

            // join analyst to specified channel
            $.post('/users/' + channel + '/join', {'username': username}, function(response) {
              console.log('analista entrou no canal..');
              $('.lw-dashboard-container').hide();
              $('.lw-chat-container').fadeIn();
            });

            // get the last waiting protocol


            var ws = new WebSocket('wss://api.layer.com/websocket?session_token=' + session_token, 'layer-1.0');
            ws.addEventListener('message', messageHandler);
            console.log('connection established.');
          }); // authenticate

          function messageHandler(event) {
            var message = JSON.parse(event.data);
            var body = message.body;
            console.log("WEBSOCKET RECEIVED: " + JSON.stringify(message, false, 4));

            switch(message.type) {
              case "change":
              handleChange(body);
              break;
            }
          };

          // message can be a Message type or a Conversation type.
          function handleChange(message) {
            try {
              switch(message.operation) {
                  case "create":
                    console.log("WEBSOCKET CREATE: " + message.object.id);
                    console.log("WEBSOCKET RECEIVED: " + JSON.stringify(message, false, 4));
                    switch(message.object.type) {
                        case "Message":
                          handleCreateMessage(message);
                          break;
                        case "Conversation":
                          handleCreateConversation(message);
                    }
                    break;

                case "delete":
                  console.log("WEBSOCKET DELETE: " + message.object.id);
                  console.log("WEBSOCKET RECEIVED: " + JSON.stringify(message, false, 4));
                  break;

                case "patch":
                  console.log("WEBSOCKET PATCH: " + message.object.id);
                  console.log("WEBSOCKET RECEIVED: " + JSON.stringify(message, false, 4));
                  break;

              }
            } catch(e) {
              console.error("layer-patch Error: " + e);
            }
          }

          function handleCreateMessage(message) {
            var getSenderName = function(sender) {
              if (sender.name == null) {
                return sender.user_id;
                } else {
                return sender.name;
              }
            }

            var sent_at = formatDateTime(message.data.sent_at);
            var parts = message.data.parts;
            var sender = message.data.sender;
            var status_message = 'DELIVERING';

            sender_name = getSenderName(sender);

            $.each(parts, function(index,message) {
              var new_message = '<div class="lw-message-content">' +
                                  '<h2 class="lw-user">' +
                                    '<strong>' + sender_name + '</strong>' + ' disse: ' +
                                  '</h2>' +
                                  '<p class="messages">' + message.body + '</p>' +
                                 '<div class="lw-status">' + '<p>' + status_message + '</p>' + '</div>' +
                                '</div>'


              chat.addMessage(new_message);
            });
          }

          function handleCreateConversation(message) {
            var participants = message.data.participants;
            var created_at = formatDateTime(message.data.created_at);
            var created_by = createdBy(chat.currentUser, participants);
            var status_message = 'DELIVERING';
            var new_message =   '<div class="lw-message-content">' +
                                  '<h2 class="lw-user">' +
                                    '<strong>' + created_by + '</strong>' + ' disse: ' +
                                  '</h2>' +
                                  '<p class="messages">' + 'Oi, eu sou Goku! Em que posso ajudar?' + '</p>' +
                                 '<div class="lw-status">' + '<p>' + status_message + '</p>' + '</div>' +
                                '</div>'

            chat.conversationId = message.data.id;
            chat.addMessage(new_message);
          }

          function createdBy(current_user, participants) {
            for (var i=participants.length-1; i>=0; i--) {
              if (participants[i] === chat.currentUser) {
                participants.splice(1, 1);
                return participants[0];
              }
            }
          }

          function formatDateTime(datetime) {
            var date = new Date(datetime);
            var dateString = date.toLocaleDateString();
            var hours = date.getHours();
            var minutes = date.getMinutes();
            var seconds = date.getSeconds();

            return dateString + ' ' + hours + ':' + minutes +  ':' + seconds;
          }

        $('#finalize_chat').click(function(e) {
            e.preventDefault();

            attributes = {
              id: chat.conversationId
            }

            $.post('/chat/finalize', attributes, function(response) {
              console.log(response)
              chat.conversationId  = null;
              $('.lw-chat-container').fadeOut();
              $('.lw-message-content').remove();
              $('.lw-dashboard-container').fadeIn();

            });
          });


        $('#chat').submit(function(e) {
          e.preventDefault();
          var message = $('#message').val();

          var new_message = '<p>' + message + '</p>';

          // creating a message
          attributes = {
            conversation: {
              id: chat.conversationId,
              sender: {
                user_id: chat.currentUser
              },
              parts: [
                {
                  body: message,
                  mime_type: 'text/plain'
                }
              ]
            }
          }

          $.post('/messages', attributes, function(message) {
            $('#message').val('');
            $('#message')[0].focus();
          });
        });

      });
    </script>

    </body>
</html>
